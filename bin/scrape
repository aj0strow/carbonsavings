#!/usr/bin/env node

var CONCURRENCY = 3
var RUNS = 1

// Scrape all accounts from august 14th to 16th.
//
//   $ bin/scrape --from 2014-08-14 --to 2014-08-16
//
// Scrape accounts 113955 and 111590 from may 22nd to 29th. 
//
//   $ bin/scrape --from 2014-05-22 113955 111590
//
// Scrape all accounts for past full week.
//
//   $ bin/scrape
//
// Scrape and retry 5 times.
//
//   $ bin/scrape -n 5
//
// Scrape 7 at a time.
//
//   $ bin/scrape -c 7
//
// The output the script are the ids that failed, which makes it easy
// to retry them manually.

var env = process.env['NODE_ENV']
if (env != 'production') {
  require('dotenv').load()
}

// dependencies

var moment = require('moment')
var async = require('async')
var minimist = require('minimist')

// libs

var scrape = require('../server/scrape/index')
var mongodb = require('../server/mongodb')

// setup

var options = {}
var args = minimist(process.argv.slice(2))

if (args.from) {
  options.from = moment(args.from, 'YYYY-MM-DD')
} else {
  options.from = moment().startOf('week').subtract(1, 'week')
}

if (args.to) {
  options.to = moment(args.to, 'YYYY-MM-DD')
} else {
  options.to = moment(options.from).add(6, 'days')
}

if (options.to.toDate() > (new Date)) {
  options.to = moment(new Date)
}

if (args.n) {
  options.n = +(args.n)
} else {
  options.n = RUNS
}

if (args.c) {
  options.c = +(args.c)
} else {
  options.c = CONCURRENCY
}

// run

var count = 0
var errors = []

var q = async.queue(function (accountId, cb) {
  if (!accountId) { return cb() }
  count ++
  scrape(accountId, options, cb)
}, options.c)

q.drain = function () {
  options.n -= 1

  console.error('\n%d accounts processed %s to %s.', count,
    options.from.format('YYYY-MM-DD'),  options.to.format('YYYY-MM-DD'))

  if (errors.length) {
    console.error('%d errors occurred.', errors.length)
    console.error(errors.join(' '))

    if (options.n > 0) {
      setTimeout(retry, 500)  
    } else {
      process.exit(1)
    }
  } else {
    process.exit(0)
  }
}

function retry () {
  count = 0
  while (errors.length) {
    push(errors.pop())
  }
}

function push (accountId) {
  q.push(accountId, function (e) {
    if (e) { errors.push(accountId) }
  })
}

if (args._.length > 0) {
  args._.forEach(push)
} else {
  mongodb.buildings.distinct('accountIds', function (e, ids) {
    if (e) {
      console.error(e)
      process.exit(1)
    }
    ids.forEach(push)
  })
}
